#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     {{ haproxy_maxconn }}
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    {{ haproxy_mode }}
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         {{ haproxy_timeout_connect }}
    timeout client          {{ haproxy_timeout_client }}
    timeout server          {{ haproxy_timeout_server }}
    timeout http-keep-alive 10s
    timeout check           {{ haproxy_timeout_check }}
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend  main *:5000
    mode http
    default_backend             dummy

backend dummy
    mode http
    stats enable
    stats uri {{ haproxy_dummy_stats_url|default("/haproxy-stats") }}
    balance     roundrobin
    server      dummy 127.0.0.1:4331 check

{% for frontend in haproxy_frontends %}
frontend  {{ frontend.name }} {{ frontend.address }}:{{ frontend.port }}
    mode              {{ frontend.mode }}
    default_backend {{ frontend.default_backend }}

{% for backend in frontend.backends %}
backend {{ backend.name }}
    stats enable
    stats uri {{ frontend.stats_uri|default("/haproxy-stats") }}
    mode {{ backend.mode|default(frontend.mode) }}
{% for option in backend.options %}
    option {{ option }}
{% endfor %}
{% for server in backend.servers %}
    server {{ server.name }} {{ server.ip }}:{{ server.port }} maxconn {{ server.maxconn }} check
{% endfor %}
{% endfor %}
{% endfor %}

{% if patroni_group_name %}
frontend ft_postgresql
    bind *:5432
    default_backend bk_db

backend bk_db
    option httpchk
{% for host in groups[patroni_group_name] %}
    server postgresql_{{ hostvars[host]['ansible_default_ipv4']['address'] }}_{{ patroni_postgres_port }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ patroni_postgres_port }} maxconn 100 check port 8008
{% endfor %}
{% endif %}
